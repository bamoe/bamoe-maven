#--------------------------------------------------------------------------------------
# Logging 
#--------------------------------------------------------------------------------------
quarkus.log.level=${loggingLevel}

#--------------------------------------------------------------------------------------
# Swagger
#--------------------------------------------------------------------------------------
quarkus.swagger-ui.always-include=${swaggerEnabled}
quarkus.http.cors=true
quarkus.http.cors.origins=*
quarkus.smallrye-openapi.path=/docs/openapi.json
quarkus.kogito.data-index.graphql.ui.always-include=true
quarkus.http.test-port=0

#--------------------------------------------------------------------------------------
# Security
#--------------------------------------------------------------------------------------
quarkus.oidc.enabled=${quarkusOIDCEnabled}
kogito.auth.enabled=${kogitoAuthEnabled}

#--------------------------------------------------------------------------------------
# Dev Services
#--------------------------------------------------------------------------------------
quarkus.dev-ui.cors.enabled=${devServicesCorsEnabled}
quarkus.kogito.devservices.enabled=${devServicesEnabled}

#--------------------------------------------------------------------------------------
# Process Engine Services
#--------------------------------------------------------------------------------------
kogito.service.url=${kogitoServiceURL}
kogito.jobs-service.url=${kogitoJobsServiceURL}
kogito.dataindex.http.url=${kogitoDataIndexServiceURL}

#--------------------------------------------------------------------------------------
# Profile Configuration
#--------------------------------------------------------------------------------------

# Dev Mode
%dev.kie.flyway.enabled=${devFlywayEnabled}
%dev.kogito.persistence.type=${devPersistenceType}
%dev.quarkus.datasource.db-kind=${devDatabaseKind}
%dev.quarkus.hibernate-orm.validate-in-dev-mode=${devHibernateValidateInDevMode}
%dev.quarkus.hibernate-orm.database.generation=${devHibernateSchemaGeneration}
%dev.quarkus.datasource.devservices.properties.NON_KEYWORDS=${devDevServicesNonKeywords}
%dev.jbpm.devui.users.jdoe.groups=${devUserGroups}

# Docker Container Profile
%docker.quarkus.container-image.builder=${dockerContainerImageBuilder}
%docker.quarkus.container-image.build=${dockerContainerImageBuild}
%docker.quarkus.container-image.push=${dockerContainerImagePush}
%docker.quarkus.container-image.name=${projectName}
%docker.quarkus.container-image.group=${dockerContainerImageGroup}
%docker.quarkus.container-image.tag=${version}
%docker.quarkus.container-image.registry=${dockerContainerImageRegistry}

# Docker Container Persistence
%docker.kie.flyway.enabled=${devFlywayEnabled}
%docker.kogito.persistence.type=${devPersistenceType}
%docker.quarkus.datasource.db-kind=${devDatabaseKind}
%docker.quarkus.hibernate-orm.validate-in-dev-mode=${devHibernateValidateInDevMode}
%docker.quarkus.hibernate-orm.database.generation=${devHibernateSchemaGeneration}
%docker.quarkus.datasource.devservices.properties.NON_KEYWORDS=${devDevServicesNonKeywords}
%docker.jbpm.devui.users.jdoe.groups=${devUserGroups}

# OpenShift Container
%openshift.quarkus.container-image.builder=${ocpContainerImageBuilder}
%openshift.quarkus.container-image.build=${ocpContainerImageBuild}
%openshift.quarkus.container-image.push=${ocpContainerImagePush}
%openshift.quarkus.container-image.name=${projectName}
%openshift.quarkus.container-image.group=${ocpContainerImageGroup}
%openshift.quarkus.container-image.tag=${version}
%openshift.quarkus.container-image.registry=${ocpContainerImageRegistry}
%openshift.quarkus.openshift.deploy=${ocpDeploy}
%openshift.quarkus.openshift.route.expose=${ocpRouteExpose}
%openshift.quarkus.openshift.route.tls.termination=${ocpRouteTLSTermination}
%openshift.quarkus.openshift.route.tls.insecure-edge-termination-policy=${ocpRouteTLSInsecureEdgeTerminationPolicy}

# OpenShift Container Persistence
%openshift.kie.flyway.enabled=${ocpFlywayEnabled}
%openshift.kogito.persistence.type=${ocpPersistenceType}
%openshift.quarkus.datasource.db-kind=${ocpDatabaseKind}
%openshift.quarkus.datasource.username=${ocpDataSourceUsername}
%openshift.quarkus.datasource.password=${ocpDataSourcePassword}
%openshift.quarkus.datasource.jdbc.url=${ocpDataSourceUrl}
%openshift.quarkus.datasource.reactive.url=${ocpDataSourceReactiveUrl}

# OpenShift - License Service Annotations
%openshift.quarkus.openshift.annotations.productID=${annotationProductID}
%openshift.quarkus.openshift.annotations.productName=${annotationProductName}
%openshift.quarkus.openshift.annotations.productMetric=${annotationProductMetric}
%openshift.quarkus.openshift.annotations.productChargedContainers=${annotationProductChargedContainers}


