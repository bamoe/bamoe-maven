#--------------------------------------------------------------------------------------
# Logging 
#--------------------------------------------------------------------------------------
quarkus.log.level=${loggingLevel}

#--------------------------------------------------------------------------------------
# Swagger
#--------------------------------------------------------------------------------------
quarkus.swagger-ui.always-include=${swaggerEnabled}
quarkus.http.cors=true
quarkus.http.cors.origins=*

#--------------------------------------------------------------------------------------
# Dev Services
#--------------------------------------------------------------------------------------
quarkus.dev-ui.cors.enabled=${devServicesCorsEnabled}
quarkus.kogito.devservices.enabled=${devServicesEnabled}

#--------------------------------------------------------------------------------------
# Profile Configuration
#--------------------------------------------------------------------------------------

# Docker Container Profile
%docker.quarkus.container-image.builder=${dockerContainerImageBuilder}
%docker.quarkus.container-image.build=${dockerContainerImageBuild}
%docker.quarkus.container-image.push=${dockerContainerImagePush}
%docker.quarkus.container-image.name=${projectName}
%docker.quarkus.container-image.group=${dockerContainerImageGroup}
%docker.quarkus.container-image.tag=${version}
%docker.quarkus.container-image.registry=${dockerContainerImageRegistry}

# OpenShift
%openshift.quarkus.container-image.builder=${ocpContainerImageBuilder}
%openshift.quarkus.container-image.build=${ocpContainerImageBuild}
%openshift.quarkus.container-image.push=${ocpContainerImagePush}
%openshift.quarkus.container-image.name=${projectName}
%openshift.quarkus.container-image.group=${ocpContainerImageGroup}
%openshift.quarkus.container-image.tag=${version}
%openshift.quarkus.container-image.registry=${ocpContainerImageRegistry}
%openshift.quarkus.openshift.deploy=${ocpDeploy}
%openshift.quarkus.openshift.route.expose=${ocpRouteExpose}
%openshift.quarkus.openshift.route.tls.termination=${ocpRouteTLSTermination}
%openshift.quarkus.openshift.route.tls.insecure-edge-termination-policy=${ocpRouteTLSInsecureEdgeTerminationPolicy}

# OpenShift - License Service Annotations
%openshift.quarkus.openshift.annotations.productID=${annotationProductID}
%openshift.quarkus.openshift.annotations.productName=${annotationProductName}
%openshift.quarkus.openshift.annotations.productMetric=${annotationProductMetric}
%openshift.quarkus.openshift.annotations.productChargedContainers=${annotationProductChargedContainers}
