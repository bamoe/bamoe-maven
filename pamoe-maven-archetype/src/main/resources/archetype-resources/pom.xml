<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>

	<!-- POM -->
	<groupId>${groupId}</groupId>
	<artifactId>${artifactId}</artifactId>
	<version>${version}</version>
	<packaging>${packaging}</packaging>
	<name>${projectName}</name>
	<description>${projectDescription}</description>

    <!-- Global Properties -->
	<properties>
		<!-- General Properties -->
		<project.build.sourceEncoding>${sourceEncoding}</project.build.sourceEncoding>
		<project.reporting.outputEncoding>${sourceEncoding}</project.reporting.outputEncoding>

		<!-- Java Properties -->
		<java.version>${javaVersion}</java.version>

		<!-- Common Maven Plugins -->
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
        <maven.compiler.parameters>${mavenCompilerParameters}</maven.compiler.parameters>
		<maven.compiler.plugin.version>${mavenCompilerPluginVersion}</maven.compiler.plugin.version>
        <maven.resources.plugin.version>${mavenResourcesPluginVersion}</maven.resources.plugin.version>
		<maven.surefire.plugin.version>${mavenSurefirePluginVersion}</maven.surefire.plugin.version>

		<!-- BAMOE -->
		<bamoe.version>${bamoeVersion}</bamoe.version>
		<bamoe.runtime.version>${quarkusRuntimeVersion}</bamoe.runtime.version>

		<!-- Testing Properties -->
      	<skipTests>${skipTests}</skipTests>
	</properties>

	<!-- Dependency Management -->
	<dependencyManagement>
		<dependencies>
			<!-- BAMOE Quarkus Runtime -->
			<dependency>
				<groupId>${quarkusRuntimeGroupId}</groupId>
				<artifactId>${quarkusRuntimeArtifactId}</artifactId>
				<version>${bamoe.runtime.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!-- BAMOE -->
			<dependency>
				<groupId>${bamoeGroupId}</groupId>
				<artifactId>${bamoeArtifactId}</artifactId>
				<version>${bamoe.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
#if (${useILMT} == 'true')
		<!-- IBM License Service (ILMT) Support -->
		<dependency>
			<groupId>com.ibm.bamoe</groupId>
			<artifactId>bamoe-ilmt-compliance-quarkus-pamoe</artifactId>
		</dependency>
#end

		<!-- Quarkus Dependencies -->
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-resteasy</artifactId>
		</dependency>

		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-resteasy-jackson</artifactId>
		</dependency>

		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-smallrye-openapi</artifactId>
		</dependency>

		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-smallrye-health</artifactId>
		</dependency>

		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-arc</artifactId>
		</dependency>

		<dependency>
			<groupId>org.jbpm</groupId>
			<artifactId>jbpm-with-drools-quarkus</artifactId>
		</dependency>

		<dependency>
			<groupId>org.kie</groupId>
			<artifactId>kie-addons-quarkus-process-management</artifactId>
		</dependency>

		<dependency>
			<groupId>org.kie</groupId>
			<artifactId>kogito-addons-quarkus-jobs-management</artifactId>
		</dependency>

		<dependency>
			<groupId>org.kie</groupId>
			<artifactId>kie-addons-quarkus-process-svg</artifactId>
		</dependency>

		<dependency>
			<groupId>org.kie</groupId>
			<artifactId>kie-addons-quarkus-source-files</artifactId>
		</dependency>

		<!-- Persistence -->
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-agroal</artifactId>
		</dependency>

		<dependency>
			<groupId>org.kie</groupId>
			<artifactId>kie-addons-quarkus-persistence-jdbc</artifactId>
		</dependency>

		<!-- User Task Persistence -->
		<dependency>
			<groupId>org.jbpm</groupId>
			<artifactId>jbpm-addons-quarkus-usertask-storage-jpa</artifactId>
		</dependency>

		<!-- Data-Index Addon -->
		<dependency>
			<groupId>org.kie</groupId>
			<artifactId>kogito-addons-quarkus-data-index-jpa</artifactId>
		</dependency>

		<!-- Jobs Service -->
		<dependency>
			<groupId>org.kie</groupId>
			<artifactId>kogito-addons-quarkus-jobs</artifactId>
		</dependency>

		<dependency>
			<groupId>org.kie.kogito</groupId>
			<artifactId>jobs-service-storage-jpa</artifactId>
		</dependency>

		<!-- Data Audit -->
		<dependency>
			<groupId>org.kie</groupId>
			<artifactId>kogito-addons-quarkus-data-audit-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>org.kie</groupId>
			<artifactId>kogito-addons-quarkus-data-audit</artifactId>
		</dependency>
#if (${useDMN} == 'true')

		<!-- Decisions -->
		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-quarkus-decisions</artifactId>
		</dependency>
#end
#if (${useDRL} == 'true')

		<!-- Rules -->
		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-quarkus-rules</artifactId>
		</dependency>
#end

		<!-- Testing -->
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-junit5</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.kie.kogito</groupId>
			<artifactId>kogito-scenario-simulation</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<!-- Profiles -->
   	<profiles>
   		<!-- H2 Database Profile:  The default database if no profile is specified. -->
		<profile>
			<id>h2</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<quarkus.profile>h2</quarkus.profile>
			</properties>
			<dependencies>
				<dependency>
					<groupId>io.quarkus</groupId>
					<artifactId>quarkus-jdbc-h2</artifactId>
				</dependency>
			</dependencies>
		</profile>

		<!-- PostgreSQL Database Profile -->
		<profile>
			<id>postgresql</id>
			<properties>
				<quarkus.profile>postgresql</quarkus.profile>
			</properties>
			<dependencies>
				<dependency>
					<groupId>io.quarkus</groupId>
					<artifactId>quarkus-jdbc-postgresql</artifactId>
				</dependency>
			</dependencies>
		</profile>

		<!-- MS SQL Server Database Profile -->
		<profile>
			<id>mssql</id>
			<properties>
				<quarkus.profile>mssql</quarkus.profile>
			</properties>
			<dependencies>
				<dependency>
					<groupId>io.quarkus</groupId>
					<artifactId>quarkus-jdbc-mssql</artifactId>
				</dependency>
				<dependency>
					<groupId>com.ibm.bamoe</groupId>
					<artifactId>bamoe-mssql-mappings</artifactId>
					<version>${bamoe.version}</version>
				</dependency>
			</dependencies>
		</profile>

   		<!-- Container Image Profile (set this to build and deploy the app as a container image) -->
        <profile>
            <id>container</id>
            <properties>
                <quarkus.profile>container</quarkus.profile>
            </properties>

            <dependencies>
                <dependency>
                    <groupId>io.quarkus</groupId>
                    <artifactId>quarkus-container-image-jib</artifactId>
                </dependency>
            </dependencies>
        </profile>

		<!-- Development Profile (set this to build and test locally as a Quarkus Dev service -->
        <profile>
            <id>development</id>
            <properties>
                <quarkus.profile>dev</quarkus.profile>
            </properties>
			<dependencies>
				<dependency>
					<groupId>org.jbpm</groupId>
					<artifactId>jbpm-quarkus-devui</artifactId>
				</dependency>

				<dependency>
					<groupId>io.quarkus</groupId>
					<artifactId>quarkus-jdbc-h2</artifactId>
				</dependency>
			</dependencies>
        </profile>
    </profiles>

	<!-- Build Plugin Management -->
    <build>
        <defaultGoal>install</defaultGoal>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>${quarkusRuntimeGroupId}</groupId>
                <artifactId>${quarkusPlugin}</artifactId>
                <version>${bamoe.runtime.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>build</goal>
                            <goal>generate-code</goal>
                            <goal>generate-code-tests</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
                				<copy includeEmptyDirs="true" overwrite="true" failonerror="false" quiet="true" todir="./docker-compose/svg">
									<fileset dir="target/classes/META-INF/processSVG/"/>
								</copy>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
        </plugins>
    </build>
</project>