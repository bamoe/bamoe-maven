#--------------------------------------------------------------------------------------
# Packaging
#--------------------------------------------------------------------------------------
#quarkus.package.type=fast-jar

#--------------------------------------------------------------------------------------
# Swagger
#--------------------------------------------------------------------------------------
quarkus.swagger-ui.always-include=${swaggerEnabled}
quarkus.http.cors=true
quarkus.http.cors.origins=*
quarkus.dev-ui.cors.enabled=false
quarkus.smallrye-openapi.path=/docs/openapi.json
quarkus.http.test-port=0
quarkus.kogito.data-index.graphql.ui.always-include=true

#--------------------------------------------------------------------------------------
# Persistence
#--------------------------------------------------------------------------------------

# Apache KIE provides a separate Flyway subsystem that allows Kogito's internal tables to be created and migrated
# without interfering with your application's Flyway, if you're using it.
#
# Note that for production environments, the usage of KIE Flyway is not recommended. The schema should be set up 
# manually using the # DDL scripts provided in the product's artifacts.
kie.flyway.enabled=${flyawayEnabled}

# Tells the Kogito runtime what kind of persistence is configured.
kogito.persistence.type=${persistenceType}

# Datasource
quarkus.datasource.db-kind=${dbKind}
quarkus.datasource.username=${dbUser}
quarkus.datasource.password=${dbPassword}
quarkus.datasource.jdbc.url=${jdbcURL}
quarkus.datasource.reactive.url=${reactiveURL}

# If hibernate is not auto generating the schema, and Quarkus is running in development mode then Quarkus will attempt
# to validate the database after startup and print a log message if there are any problems. This is not required as we
# use flyway
quarkus.hibernate-orm.validate-in-dev-mode=false
quarkus.hibernate-orm.database.generation=none

#--------------------------------------------------------------------------------------
# Profile Configuration
#--------------------------------------------------------------------------------------

# H2 Database Profile
%h2.quarkus.datasource.db-kind=h2
%h2.quarkus.datasource.devservices.properties.NON_KEYWORDS=VALUE,KEY

# PostgreSQL Database Profile
%postgresql.quarkus.datasource.db-kind=postgresql

# MS SQL Server Database Profile
%mssql.quarkus.datasource.db-kind=mssql
%mssql.quarkus.hibernate-orm.mapping-files=META-INF/bamoe-data-index-orm.xml,META-INF/bamoe-job-service-orm.xml

# Container Profile
%container,postgresql,mssql.quarkus.container-image.build=${containerImageBuild}
%container,postgresql,mssql.quarkus.container-image.push=${containerImagePush}
%container,postgresql,mssql.quarkus.container-image.group=${containerImageGroup}
%container,postgresql,mssql.quarkus.container-image.tag=${project.version}
%container,postgresql,mssql.quarkus.container-image.builder=${containerImageBuilder}
%container,postgresql,mssql.quarkus.container-image.registry=${containerImageRegistry}
%container,postgresql,mssql.quarkus.container-image.name=${projectName}

#--------------------------------------------------------------------------------------
# Security
#--------------------------------------------------------------------------------------
quarkus.oidc.enabled=${oidcEnabled}
kogito.auth.enabled=${kogitoAuthEnabled}

#--------------------------------------------------------------------------------------
# Services
#--------------------------------------------------------------------------------------
kogito.service.url=${kogitoServiceURL}
kogito.jobs-service.url=${kogitoJobsServiceURL}
kogito.dataindex.http.url=${kogitoDataIndexURL}


