#--------------------------------------------------------------------------------------
# Packaging
#--------------------------------------------------------------------------------------
#quarkus.package.type=fast-jar

#if (${runtime} == 'quarkus')
#--------------------------------------------------------------------------------------
# Swagger
#--------------------------------------------------------------------------------------
quarkus.swagger-ui.always-include=${swaggerEnabled}
quarkus.http.cors=true
quarkus.http.cors.origins=*
quarkus.dev-ui.cors.enabled=false
quarkus.smallrye-openapi.path=/docs/openapi.json
quarkus.http.test-port=0
quarkus.kogito.data-index.graphql.ui.always-include=true

#--------------------------------------------------------------------------------------
# Event Management
#--------------------------------------------------------------------------------------

# Incoming Event Configuration
#mp.messaging.incoming.kogito_incoming_stream.group.id=dmn-event-driven-example
#mp.messaging.incoming.kogito_incoming_stream.connector=smallrye-kafka
#mp.messaging.incoming.kogito_incoming_stream.topic=dmn-event-driven-requests
#mp.messaging.incoming.kogito_incoming_stream.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Outgoing Event Configuration
#mp.messaging.outgoing.kogito_outgoing_stream.group.id=dmn-event-driven-example
#mp.messaging.outgoing.kogito_outgoing_stream.connector=smallrye-kafka
#mp.messaging.outgoing.kogito_outgoing_stream.topic=dmn-event-driven-responses
#mp.messaging.outgoing.kogito_outgoing_stream.value.serializer=org.apache.kafka.common.serialization.StringSerializer

#--------------------------------------------------------------------------------------
# Profile Configuration
#--------------------------------------------------------------------------------------

# Container Profile
%container.quarkus.container-image.build=${containerImageBuild}
%container.quarkus.container-image.push=${containerImagePush}
%container.quarkus.container-image.name=${projectName}
%container.quarkus.container-image.group=${containerImageGroup}
%container.quarkus.container-image.tag=${version}
%container.quarkus.container-image.builder=${containerImageBuilder}
%container.quarkus.container-image.registry=${containerImageRegistry}
#end
#if (${runtime} == 'spring-boot')
#--------------------------------------------------------------------------------------
# Swagger
#--------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------
# Event Management
#--------------------------------------------------------------------------------------
#kogito.addon.cloudevents.kafka.kogito_incoming_stream=dmn-event-driven-requests
#kogito.addon.cloudevents.kafka.kogito_outgoing_stream=dmn-event-driven-responses
#kogito.addon.tracing.decision.kafka.bootstrapAddress=localhost:9092
#spring.kafka.bootstrap-servers=localhost:9092
#spring.kafka.consumer.group-id=dmn-event-driven-example
#spring.kafka.consumer.auto-offset-reset=earliest

#--------------------------------------------------------------------------------------
# Profile Configuration
#--------------------------------------------------------------------------------------

# Container Profile
# TBD...

#end